{"version":3,"sources":["Cards.js","CardView.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["make","Record","id","status","symbol","Cards","toggle","i","cards","card","get","set","toggleCard","generate","symbols","List","concat","sortBy","Math","random","map","isOpen","isDisable","disable","this","close","card1","equals","card2","CardView","props","handleClick","classes","join","react_default","a","createElement","className","onClick","App","cardsInitial","_useState","useState","_useState2","Object","slicedToArray","setCards","useEffect","openedCards","filter","_ref","setTimeout","size","alert","src_CardView","key","prevCards","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2e3221d4.chunk.js","sourcesContent":["// @flow\n\nimport { Record, List } from 'immutable';\nimport type { RecordFactory, RecordOf } from 'immutable';\n\ntype Status = 'open' | 'close' | 'disable';\n\ntype CardProps = { id: number, status: Status, symbol: string };\ntype Card = RecordOf<CardProps>;\n\nconst defaultValues: CardProps = { id: 0, status: 'close', symbol: 'a' };\nconst make: RecordFactory<CardProps> = Record(defaultValues);\n\nconst generate = (symbols: Array<string>): List<Card> => {\n  const cards = List(symbols.concat(symbols)).sortBy(Math.random);\n  return cards.map((symbol, id) => make({ id, symbol }));\n};\n\nconst toggleCard = (card: Card) => {\n  switch (card.status) {\n    case 'open':\n      return card.set('status', 'close');\n    case 'close':\n      return card.set('status', 'open');\n    default:\n      return card;\n  }\n};\n\nconst toggle = (i: number, cards: List<Card>): List<Card> => {\n  const card = cards.get(i);\n  if (card == null) {\n    return cards;\n  }\n\n  return cards.set(i, toggleCard(card));\n};\n\nconst isOpen = (card: Card) => card.status === 'open';\n\nconst isDisable = (card: Card) => card.status === 'disable';\n\nfunction disable(card: Card): Card {\n  if (this.symbol === card.symbol) {\n    return card.set('status', 'disable');\n  }\n  return card;\n}\n\nfunction close(card: Card): Card {\n  if (this.card1.equals(card) || this.card2.equals(card)) {\n    return card.set('status', 'close');\n  }\n  return card;\n}\n\nexport default {\n  toggle, make, generate, isOpen, isDisable, disable, close,\n};\nexport type { Card };\n","// @flow\n\nimport React from 'react';\nimport type { Card } from './Cards';\n\ntype CardProps = { card: Card, handleClick: Function };\n\nfunction CardView(props: CardProps) {\n  const { card, handleClick } = props;\n\n  const classes = [\n    'card',\n    card.status !== 'close' ? 'show' : '',\n    card.status === 'disable' ? 'disabled' : '',\n  ].join(' ');\n\n  return (\n    <div className={classes} onClick={handleClick}>\n      <div className=\"flipper\">\n        <div className=\"card__front\">?</div>\n        <div className=\"card__back\">{card.symbol}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default CardView;\n","// @flow\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Cards from './Cards';\nimport Card from './CardView';\n\nfunction App() {\n  const cardsInitial = Cards.generate(['🦋', '🐼', '🐠', '🐲', '🐘', '🦁']);\n  const [cards, setCards] = useState(cardsInitial);\n\n  const handleClick = (i) => {\n    const openedCards = cards.filter(Cards.isOpen);\n    if (openedCards.size < 2) {\n      setCards(prevCards => Cards.toggle(i, prevCards));\n    }\n  };\n\n  useEffect(() => {\n    const openedCards = cards.filter(Cards.isOpen);\n    const [card1, card2] = [openedCards.get(0), openedCards.get(1)];\n    if (card1 == null || card2 == null) {\n      return;\n    }\n\n    if (card1.symbol === card2.symbol) {\n      const { symbol } = card1;\n      setCards(cards.map(Cards.disable, { symbol }));\n    } else {\n      setTimeout(() => {\n        setCards(cards.map(Cards.close, { card1, card2 }));\n      }, 900);\n    }\n  }, [cards]);\n\n  useEffect(() => {\n    const disabledCards = cards.filter(Cards.isDisable);\n    if (disabledCards.size === cards.size) {\n      alert('Congratulation! You won!');\n    }\n  }, [cards]);\n\n  return cards.map((card, i) => (\n    <Card\n      card={card}\n      key={card.id}\n      handleClick={() => handleClick(i)}\n    />\n  ));\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}