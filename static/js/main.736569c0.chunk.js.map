{"version":3,"sources":["App.js","serviceWorker.js","models/Game.js","models/Card.js","index.js","helpers/generatePairOfCards.js"],"names":["Card","props","game","card","i","index","boxClass","isOpened","isDeactivated","react_default","a","createElement","className","join","onClick","onPress","bind","getValue","App","getCards","map","App_Card","key","Boolean","window","location","hostname","match","Game","cards","callbackUpdate","Object","classCallCheck","this","openedCard","updated","_this","toggleCard","setTimeout","compareCards","toggle","isEqual","deactivate","close","Status","closed","opened","deactivated","value","status","open","values","hasToShuffle","concat","length","position","max","Math","floor","random","temp","shuffle","generatePairOfCards","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.736569c0.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App(props) {\n    return props.game.getCards().map((card, i) => {\n        return <Card game={props.game} card={card} index={i} key={i} />\n    });\n}\n\nfunction Card(props) {\n    const game = props.game;\n    const card = props.card;\n    const i = props.index;\n\n    const boxClass = [\n        \"card\",\n        card.isOpened() || card.isDeactivated() ? 'show' : '',\n        card.isDeactivated() ? 'disabled' : ''\n    ];\n\n    return (\n      <div className={boxClass.join(' ')} onClick={game.onPress.bind(game, i)}>\n        <div className=\"flipper\">\n          <div className=\"card__front\">?</div>\n          <div className=\"card__back\">{card.getValue()}</div>\n        </div>\n      </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","class Game {\n    constructor(cards, callbackUpdate) {\n        this.openedCard = null;\n        this.cards = cards;\n        this.updated = callbackUpdate;\n\n        this.updated();\n    }\n\n    getCards() {\n        return this.cards;\n    }\n\n    onPress(index) {\n        this.toggleCard(index);\n        setTimeout(() => {\n            this.compareCards(index);\n        }, 1000);\n    }\n  \n    toggleCard(index) {\n        const card = this.cards[index];\n        if (!card.isDeactivated()) {\n            card.toggle();\n            this.updated();\n        }\n    }\n  \n    compareCards(index) {\n        if (this.openedCard === null) {\n            this.openedCard = index;\n            return;\n        }\n  \n        if (index === this.openedCard) {\n            this.openedCard = null;\n            return;\n        }\n\n        const card = this.cards[index];\n        const openedCard = this.cards[this.openedCard];\n  \n        if (card.isEqual(openedCard)){\n            card.deactivate();\n            openedCard.deactivate();\n            this.openedCard = null;\n        } else {\n            card.close();\n            openedCard.close();\n            this.openedCard = null;\n        }\n        this.updated();\n    }\n\n}\n\nexport default Game;","const Status = {\n    closed: 0,\n    opened: 1,\n    deactivated: 2\n}\n\nclass Card {\n    constructor(value) {\n        this.status = Status.closed;\n        this.value = value;\n    }\n\n    open () {\n        this.status = Status.opened;\n    }\n\n    close() {\n        this.status = Status.closed;\n    }\n\n    toggle() {\n        if (this.isOpened()) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    isEqual(card) {\n        return this.value === card.value;\n    }\n\n    isOpened() {\n        return this.status === Status.opened;\n    }\n\n    isClosed() {\n        return this.status === Status.closed;\n    }\n\n    deactivate() {\n        this.status = Status.deactivated;\n    }\n\n    isDeactivated() {\n        return this.status === Status.deactivated;\n    }\n\n    getValue() {\n        return this.value;\n    }\n}\n\nexport default Card;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Game from './models/Game';\nimport generatePairOfCards from './helpers/generatePairOfCards';\n\nconst cards = generatePairOfCards([\n    \"🎃\", \"👾\", \"👽\", \"🤖\", \"👑\", \"🐷\"\n], true);\n\nconst update = function() {\n    ReactDOM.render(<App game={this}/>, document.getElementById('root'));\n};\n\nnew Game(cards, update);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import Card from \"../models/Card\";\n\nfunction generatePairOfCards(values, hasToShuffle) {\n    hasToShuffle = (hasToShuffle === true); //always false if not true\n\n    let cards = values.concat(values);\n    if (hasToShuffle) {\n        cards = shuffle(cards);\n    }\n\n    return cards.map((value) => {\n        return new Card(value);\n    });\n}\n\nfunction shuffle(values) {\n    const length = values.length;\n    for (let i = 0; i < length; i++) {\n        const position = getRandomInt(length);\n\n        const temp = values[i];\n        values[i] = values[position];\n        values[position] = temp;\n    }\n    return values;\n}\n\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport default generatePairOfCards;"],"sourceRoot":""}